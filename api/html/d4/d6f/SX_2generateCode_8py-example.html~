<!-- HTML header for doxygen 1.8.6-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<title>CasADi: SX/generateCode.py</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<link rel="search" href="../../search_opensearch.php?v=opensearch.xml" type="application/opensearchdescription+xml" title="CasADi"/>
<link href="../../customdoxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname"><a href="http://casadi.org"><img src="/_img/logo_2017_horizontal.png" alt="CasADi" height="55px"/></a>&#160;<span>public API<sup style="font-size: 30%">(<a href="../../../internal/index.html">switch to internal</a>)</sup></span> - <a href="https://github.com/casadi/casadi/tree/279e0b80886dc5eb43a9d12a1056c550dc3b786e" id="279e0b80886dc5eb43a9d12a1056c550dc3b786e" >revision 3.6.6</a></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,true,'search.html','Search');
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() {
    if ($('.searchresults').length > 0) { searchBox.DOMSearchField().focus(); }
  });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">SX/generateCode.py</div>  </div>
</div><!--header-->
<div class="contents">
<p>This example looks at symbolic substitution is SX graphs</p>
<p>View <a href="../../SX/generateCode.pdf">output (PDF)</a> | <a href="../../SX/generateCode.py">source (python)</a></p>
<div class="fragment"><div class="line"><span class="comment">/* This file was automatically generated by CasADi 3.6.6.</span></div>
<div class="line"><span class="comment"> *  It consists of: </span></div>
<div class="line"><span class="comment"> *   1) content generated by CasADi runtime: not copyrighted</span></div>
<div class="line"><span class="comment"> *   2) template code copied from CasADi source: permissively licensed (MIT-0)</span></div>
<div class="line"><span class="comment"> *   3) user code: owned by the user</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="preprocessor">#ifdef __cplusplus</span></div>
<div class="line"><span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> {</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">/* How to prefix internal symbols */</span></div>
<div class="line"><span class="preprocessor">#ifdef CASADI_CODEGEN_PREFIX</span></div>
<div class="line"><span class="preprocessor">  #define CASADI_NAMESPACE_CONCAT(NS, ID) _CASADI_NAMESPACE_CONCAT(NS, ID)</span></div>
<div class="line"><span class="preprocessor">  #define _CASADI_NAMESPACE_CONCAT(NS, ID) NS ## ID</span></div>
<div class="line"><span class="preprocessor">  #define CASADI_PREFIX(ID) CASADI_NAMESPACE_CONCAT(CODEGEN_PREFIX, ID)</span></div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line"><span class="preprocessor">  #define CASADI_PREFIX(ID) f_generated_ ## ID</span></div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &lt;math.h&gt;</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#ifndef casadi_real</span></div>
<div class="line"><span class="preprocessor">#define casadi_real double</span></div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#ifndef casadi_int</span></div>
<div class="line"><span class="preprocessor">#define casadi_int long long int</span></div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">/* Add prefix to internal symbols */</span></div>
<div class="line"><span class="preprocessor">#define casadi_f0 CASADI_PREFIX(f0)</span></div>
<div class="line"><span class="preprocessor">#define casadi_s0 CASADI_PREFIX(s0)</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">/* Symbol visibility in DLLs */</span></div>
<div class="line"><span class="preprocessor">#ifndef </span></div>
<div class="line"><span class="preprocessor">  #if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)</span></div>
<div class="line"><span class="preprocessor">    #if defined(STATIC_LINKED)</span></div>
<div class="line"><span class="preprocessor">      #define </span></div>
<div class="line"><span class="preprocessor">    #else</span></div>
<div class="line"><span class="preprocessor">      #define  __declspec(dllexport)</span></div>
<div class="line"><span class="preprocessor">    #endif</span></div>
<div class="line"><span class="preprocessor">  #elif defined(__GNUC__) &amp;&amp; defined(GCC_HASCLASSVISIBILITY)</span></div>
<div class="line"><span class="preprocessor">    #define  __attribute__ ((visibility (&quot;default&quot;</span>)))</div>
<div class="line"><span class="preprocessor">  #else</span></div>
<div class="line"><span class="preprocessor">    #define </span></div>
<div class="line"><span class="preprocessor">  #endif</span></div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <span class="keyword">const</span> casadi_int casadi_s0[5] = {1, 1, 0, 1, 0};</div>
<div class="line"> </div>
<div class="line"><span class="comment">/* f:(i0,i1)-&gt;(o0) */</span></div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> casadi_f0(<span class="keyword">const</span> casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, <span class="keywordtype">int</span> mem) {</div>
<div class="line">  casadi_real a0, a1, a2;</div>
<div class="line">  a0=arg[0]? arg[0][0] : 0;</div>
<div class="line">  a1=arg[1]? arg[1][0] : 0;</div>
<div class="line">  a0=(a0*a1);</div>
<div class="line">  a2=2.;</div>
<div class="line">  a2=(a2*a1);</div>
<div class="line">  a0=(a0+a2);</div>
<div class="line">  a2=4.;</div>
<div class="line">  a2=(a2*a0);</div>
<div class="line">  a0=(a0+a2);</div>
<div class="line">  <span class="keywordflow">if</span> (res[0]!=0) res[0][0]=a0;</div>
<div class="line">  <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"> <span class="keywordtype">int</span> f(<span class="keyword">const</span> casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, <span class="keywordtype">int</span> mem){</div>
<div class="line">  <span class="keywordflow">return</span> casadi_f0(arg, res, iw, w, mem);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"> <span class="keywordtype">int</span> f_alloc_mem(<span class="keywordtype">void</span>) {</div>
<div class="line">  <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"> <span class="keywordtype">int</span> f_init_mem(<span class="keywordtype">int</span> mem) {</div>
<div class="line">  <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"> <span class="keywordtype">void</span> f_free_mem(<span class="keywordtype">int</span> mem) {</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"> <span class="keywordtype">int</span> f_checkout(<span class="keywordtype">void</span>) {</div>
<div class="line">  <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"> <span class="keywordtype">void</span> f_release(<span class="keywordtype">int</span> mem) {</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"> <span class="keywordtype">void</span> f_incref(<span class="keywordtype">void</span>) {</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"> <span class="keywordtype">void</span> f_decref(<span class="keywordtype">void</span>) {</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"> casadi_int f_n_in(<span class="keywordtype">void</span>) { <span class="keywordflow">return</span> 2;}</div>
<div class="line"> </div>
<div class="line"> casadi_int f_n_out(<span class="keywordtype">void</span>) { <span class="keywordflow">return</span> 1;}</div>
<div class="line"> </div>
<div class="line"> casadi_real f_default_in(casadi_int i) {</div>
<div class="line">  <span class="keywordflow">switch</span> (i) {</div>
<div class="line">    <span class="keywordflow">default</span>: <span class="keywordflow">return</span> 0;</div>
<div class="line">  }</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"> <span class="keyword">const</span> <span class="keywordtype">char</span>* f_name_in(casadi_int i) {</div>
<div class="line">  <span class="keywordflow">switch</span> (i) {</div>
<div class="line">    <span class="keywordflow">case</span> 0: <span class="keywordflow">return</span> <span class="stringliteral">&quot;i0&quot;</span>;</div>
<div class="line">    <span class="keywordflow">case</span> 1: <span class="keywordflow">return</span> <span class="stringliteral">&quot;i1&quot;</span>;</div>
<div class="line">    <span class="keywordflow">default</span>: <span class="keywordflow">return</span> 0;</div>
<div class="line">  }</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"> <span class="keyword">const</span> <span class="keywordtype">char</span>* f_name_out(casadi_int i) {</div>
<div class="line">  <span class="keywordflow">switch</span> (i) {</div>
<div class="line">    <span class="keywordflow">case</span> 0: <span class="keywordflow">return</span> <span class="stringliteral">&quot;o0&quot;</span>;</div>
<div class="line">    <span class="keywordflow">default</span>: <span class="keywordflow">return</span> 0;</div>
<div class="line">  }</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"> <span class="keyword">const</span> casadi_int* f_sparsity_in(casadi_int i) {</div>
<div class="line">  <span class="keywordflow">switch</span> (i) {</div>
<div class="line">    <span class="keywordflow">case</span> 0: <span class="keywordflow">return</span> casadi_s0;</div>
<div class="line">    <span class="keywordflow">case</span> 1: <span class="keywordflow">return</span> casadi_s0;</div>
<div class="line">    <span class="keywordflow">default</span>: <span class="keywordflow">return</span> 0;</div>
<div class="line">  }</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"> <span class="keyword">const</span> casadi_int* f_sparsity_out(casadi_int i) {</div>
<div class="line">  <span class="keywordflow">switch</span> (i) {</div>
<div class="line">    <span class="keywordflow">case</span> 0: <span class="keywordflow">return</span> casadi_s0;</div>
<div class="line">    <span class="keywordflow">default</span>: <span class="keywordflow">return</span> 0;</div>
<div class="line">  }</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"> <span class="keywordtype">int</span> f_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {</div>
<div class="line">  <span class="keywordflow">if</span> (sz_arg) *sz_arg = 2;</div>
<div class="line">  <span class="keywordflow">if</span> (sz_res) *sz_res = 1;</div>
<div class="line">  <span class="keywordflow">if</span> (sz_iw) *sz_iw = 0;</div>
<div class="line">  <span class="keywordflow">if</span> (sz_w) *sz_w = 0;</div>
<div class="line">  <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"> <span class="keywordtype">int</span> f_work_bytes(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {</div>
<div class="line">  <span class="keywordflow">if</span> (sz_arg) *sz_arg = 2*<span class="keyword">sizeof</span>(<span class="keyword">const</span> casadi_real*);</div>
<div class="line">  <span class="keywordflow">if</span> (sz_res) *sz_res = 1*<span class="keyword">sizeof</span>(casadi_real*);</div>
<div class="line">  <span class="keywordflow">if</span> (sz_iw) *sz_iw = 0*<span class="keyword">sizeof</span>(casadi_int);</div>
<div class="line">  <span class="keywordflow">if</span> (sz_w) *sz_w = 0*<span class="keyword">sizeof</span>(casadi_real);</div>
<div class="line">  <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#ifdef __cplusplus</span></div>
<div class="line">} <span class="comment">/* extern &quot;C&quot; */</span></div>
<div class="line"><span class="preprocessor">#endif</span></div>
</div><!-- fragment --><dl class="section see"><dt>See also</dt><dd><div class="fragment"><div class="line"><a name="a0"></a><a class="code" href="../../da/da4/classcasadi_1_1Function.html#aad4601093154f9087c09001ba857d645">casadi::Function::generate</a>(<span class="keyword">const</span> std::string&amp;);</div>
<div class="line">casadi::Function::repr(std::ostream &amp;stream);</div>
<div class="line">casadi::Function::print(std::ostream &amp;stream);</div>
<div class="ttc" id="aclasscasadi_1_1Function_html_aad4601093154f9087c09001ba857d645"><div class="ttname"><a href="../../da/da4/classcasadi_1_1Function.html#aad4601093154f9087c09001ba857d645">casadi::Function::generate</a></div><div class="ttdeci">std::string generate(const std::string &amp;fname, const Dict &amp;opts=Dict()) const</div><div class="ttdoc">Export / Generate C code for the function.</div></div>
</div><!-- fragment --></dd></dl>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">#     This file is part of CasADi.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">#     CasADi -- A symbolic framework for dynamic optimization.</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">#     Copyright (C) 2010-2023 Joel Andersson, Joris Gillis, Moritz Diehl,</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">#                             KU Leuven. All rights reserved.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">#     Copyright (C) 2011-2014 Greg Horn</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">#     CasADi is free software; you can redistribute it and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">#     modify it under the terms of the GNU Lesser General Public</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">#     License as published by the Free Software Foundation; either</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">#     version 3 of the License, or (at your option) any later version.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">#     CasADi is distributed in the hope that it will be useful,</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">#     but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">#     Lesser General Public License for more details.</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">#     You should have received a copy of the GNU Lesser General Public</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">#     License along with CasADi; if not, write to the Free Software</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">#     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160; </div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"># Code generation</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment"># ======================</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">from</span> casadi <span class="keyword">import</span> *</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160; </div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment"># Let&#39;s build a trivial symbolic SX graph</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160; </div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;x = SX.sym(<span class="stringliteral">&quot;x&quot;</span>)</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;y = SX.sym(<span class="stringliteral">&quot;y&quot;</span>)</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;z = x*y+2*y</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;z += 4*z</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment"># A Function is needed to inspect the graph</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160; </div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;f = Function(<span class="stringliteral">&quot;f&quot;</span>, [x,y],[z])</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160; </div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"># The default representation is just the name of the function</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;print(f.__repr__())</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment"># A print statement will call __str__()</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment"># The result will look like a node-by-node tree evaluation</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;print(f)</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"># The generate method will insert this node-by-node evaluation in exported C code</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; </div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;f.generate(<span class="stringliteral">&quot;f_generated&quot;</span>)</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"># This is how the exported code looks like:</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;print(open(<span class="stringliteral">&#39;f_generated.c&#39;</span>).read())</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
</div><!-- fragment --> </div><!-- contents -->
</body>
</html>
