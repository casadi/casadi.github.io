<!-- HTML header for doxygen 1.8.6-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<title>CasADi: solvers/callback.py</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<link rel="search" href="../../search_opensearch.php?v=opensearch.xml" type="application/opensearchdescription+xml" title="CasADi"/>
<link href="../../customdoxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname"><a href="http://casadi.org"><img src="/api/html/casadi.png" alt="CasADi" height="55px"/></a>&#160;<span>internal API<sup style="font-size:30%">(<a href="../../../html/index.html">switch to public</a>)</sup></span> - <a href="https://github.com/casadi/casadi/tree/9763952a9aa742c5be3b53dc1a1d033a57235328" id="9763952a9aa742c5be3b53dc1a1d033a57235328" >revision 3.7.1</a></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,true,'search.html','Search');
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() {
    if ($('.searchresults').length > 0) { searchBox.DOMSearchField().focus(); }
  });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">solvers/callback.py</div>  </div>
</div><!--header-->
<div class="contents">
<p>This example demonstrates how to use callback function for Ipopt.</p>
<p>View <a href="../../solvers/callback.pdf">output (PDF)</a> | <a href="../../solvers/callback.py">source (python)</a></p>
<dl class="section see"><dt>See also</dt><dd><div class="fragment"><div class="line"><a name="_a0"></a><a class="code" href="../../da/da4/classcasadi_1_1Function.html">casadi::Function</a>();</div>
<div class="ttc" id="aclasscasadi_1_1Function_html"><div class="ttname"><a href="../../da/da4/classcasadi_1_1Function.html">casadi::Function</a></div><div class="ttdoc">Function object.</div><div class="ttdef"><b>Definition:</b> <a href="../../d7/d7c/function_8hpp_source.html#l00058">function.hpp:60</a></div></div>
</div><!-- fragment --></dd></dl>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">#     This file is part of CasADi.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">#     CasADi -- A symbolic framework for dynamic optimization.</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">#     Copyright (C) 2010-2023 Joel Andersson, Joris Gillis, Moritz Diehl,</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">#                             KU Leuven. All rights reserved.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">#     Copyright (C) 2011-2014 Greg Horn</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">#     CasADi is free software; you can redistribute it and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">#     modify it under the terms of the GNU Lesser General Public</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">#     License as published by the Free Software Foundation; either</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">#     version 3 of the License, or (at your option) any later version.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">#     CasADi is distributed in the hope that it will be useful,</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">#     but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">#     Lesser General Public License for more details.</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">#     You should have received a copy of the GNU Lesser General Public</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">#     License along with CasADi; if not, write to the Free Software</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">#     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160; </div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"># Callback</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment"># =====================</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword">from</span> casadi <span class="keyword">import</span> *</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">from</span> numpy <span class="keyword">import</span> *</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160; </div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment"># In this example, we will demonstrate callback functionality for Ipopt.</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment"># Note that you need the fix https://github.com/casadi/casadi/wiki/enableIpoptCallback before this works</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment"># We start with constructing the rosenbrock problem</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;x=SX.sym(<span class="stringliteral">&quot;x&quot;</span>)</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;y=SX.sym(<span class="stringliteral">&quot;y&quot;</span>)</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;f = (1-x)**2+100*(y-x**2)**2</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;nlp={<span class="stringliteral">&#39;x&#39;</span>:vertcat(x,y), <span class="stringliteral">&#39;f&#39;</span>:f,<span class="stringliteral">&#39;g&#39;</span>:x+y}</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;fcn = Function(<span class="stringliteral">&#39;f&#39;</span>, [x, y], [f])</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">import</span> matplotlib</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keywordflow">if</span> <span class="stringliteral">&quot;Agg&quot;</span> <span class="keywordflow">not</span> <span class="keywordflow">in</span> matplotlib.get_backend():</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  matplotlib.interactive(<span class="keyword">True</span>)</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">from</span> pylab <span class="keyword">import</span> figure, subplot, contourf, colorbar, draw, show, plot, title</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keyword">import</span> time</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; </div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword">class </span>MyCallback(Callback):</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  <span class="keyword">def </span>__init__(self, name, nx, ng, np, opts={}):</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    Callback.__init__(self)</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    self.nx = nx</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    self.ng = ng</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    self.np = np</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    figure(1)</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    x_,y_ = mgrid[-1:1.5:0.01,-1:1.5:0.01]</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    z_ = DM.zeros(x_.shape)</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(x_.shape[0]):</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;      <span class="keywordflow">for</span> j <span class="keywordflow">in</span> range(x_.shape[1]):</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        z_[i,j] = fcn(x_[i,j],y_[i,j])</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    contourf(x_,y_,z_)</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    colorbar()</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    title(<span class="stringliteral">&#39;Iterations of Rosenbrock&#39;</span>)</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    draw()</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    self.x_sols = []</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    self.y_sols = []</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="comment"># Initialize internal objects</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    self.construct(name, opts)</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; </div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  <span class="keyword">def </span>get_n_in(self): <span class="keywordflow">return</span> nlpsol_n_out()</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  <span class="keyword">def </span>get_n_out(self): <span class="keywordflow">return</span> 1</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  <span class="keyword">def </span>get_name_in(self, i): <span class="keywordflow">return</span> nlpsol_out(i)</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  <span class="keyword">def </span>get_name_out(self, i): <span class="keywordflow">return</span> <span class="stringliteral">&quot;ret&quot;</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160; </div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  <span class="keyword">def</span> get_sparsity_in(self, i):</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    n = <a class="code" href="../../d4/d89/group__nlpsol.html#gaecb1cd6da379efc7703fe75b44672276">nlpsol_out</a>(i)</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">if</span> n==<span class="stringliteral">&#39;f&#39;</span>:</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;      <span class="keywordflow">return</span> Sparsity. scalar()</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">elif</span> n <span class="keywordflow">in</span> (<span class="stringliteral">&#39;x&#39;</span>, <span class="stringliteral">&#39;lam_x&#39;</span>):</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;      <span class="keywordflow">return</span> Sparsity.dense(self.nx)</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">elif</span> n <span class="keywordflow">in</span> (<span class="stringliteral">&#39;g&#39;</span>, <span class="stringliteral">&#39;lam_g&#39;</span>):</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;      <span class="keywordflow">return</span> Sparsity.dense(self.ng)</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;      <span class="keywordflow">return</span> Sparsity(0,0)</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  <span class="keyword">def </span>eval(self, arg):</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="comment"># Create dictionary</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    darg = {}</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordflow">for</span> (i,s) <span class="keywordflow">in</span> enumerate(<a class="code" href="../../d4/d89/group__nlpsol.html#gaecb1cd6da379efc7703fe75b44672276">nlpsol_out</a>()): darg[s] = arg[i]</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160; </div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    sol = darg[<span class="stringliteral">&#39;x&#39;</span>]</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    self.x_sols.append(float(sol[0]))</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    self.y_sols.append(float(sol[1]))</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordflow">if</span> hasattr(self,<span class="stringliteral">&#39;lines&#39;</span>):</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;      <span class="keywordflow">if</span> <span class="stringliteral">&quot;template&quot;</span> <span class="keywordflow">not</span> <span class="keywordflow">in</span> matplotlib.get_backend(): <span class="comment"># Broken for template: https://github.com/matplotlib/matplotlib/issues/8516/</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        self.lines[0].set_data(self.x_sols,self.y_sols)</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; </div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;      self.lines = plot(self.x_sols,self.y_sols,<span class="stringliteral">&#39;or-&#39;</span>)</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160; </div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    draw()</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    time.sleep(0.25)</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160; </div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">return</span> [0]</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;mycallback = MyCallback(<span class="stringliteral">&#39;mycallback&#39;</span>, 2, 1, 0)</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;opts = {}</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;opts[<span class="stringliteral">&#39;iteration_callback&#39;</span>] = mycallback</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;opts[<span class="stringliteral">&#39;ipopt.tol&#39;</span>] = 1e-8</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;opts[<span class="stringliteral">&#39;ipopt.max_iter&#39;</span>] = 50</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;solver = <a class="code" href="../../d4/d89/group__nlpsol.html#gaac593497a58a865ab7f150c84fb043c7">nlpsol</a>(<span class="stringliteral">&#39;solver&#39;</span>, <span class="stringliteral">&#39;ipopt&#39;</span>, nlp, opts)</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;sol = solver(lbx=-10, ubx=10, lbg=-10, ubg=10)</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160; </div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment"># By setting matplotlib interactivity off, we can inspect the figure at ease</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;matplotlib.interactive(<span class="keyword">False</span>)</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;show()</div>
<div class="ttc" id="agroup__nlpsol_html_gaac593497a58a865ab7f150c84fb043c7"><div class="ttname"><a href="../../d4/d89/group__nlpsol.html#gaac593497a58a865ab7f150c84fb043c7">casadi::nlpsol</a></div><div class="ttdeci">Function nlpsol(const std::string &amp;name, const std::string &amp;solver, const SXDict &amp;nlp, const Dict &amp;opts)</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d7a/nlpsol_8cpp_source.html#l00118">nlpsol.cpp:118</a></div></div>
<div class="ttc" id="agroup__nlpsol_html_gaecb1cd6da379efc7703fe75b44672276"><div class="ttname"><a href="../../d4/d89/group__nlpsol.html#gaecb1cd6da379efc7703fe75b44672276">casadi::nlpsol_out</a></div><div class="ttdeci">std::vector&lt; std::string &gt; nlpsol_out()</div><div class="ttdoc">Get NLP solver output scheme of NLP solvers.</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d7a/nlpsol_8cpp_source.html#l00206">nlpsol.cpp:206</a></div></div>
</div><!-- fragment --> </div><!-- contents -->
</body>
</html>
