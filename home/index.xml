<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Homes on CasADi</title>
    <link>https://web.casadi.org/home/</link>
    <description>Recent content in Homes on CasADi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Oct 2014 20:07:19 +0000</lastBuildDate><atom:link href="https://web.casadi.org/home/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Welcome to CasADi</title>
      <link>https://web.casadi.org/home/card-subtitle/</link>
      <pubDate>Mon, 13 Oct 2014 20:07:19 +0000</pubDate>
      
      <guid>https://web.casadi.org/home/card-subtitle/</guid>
      <description>Build efficient optimal control software, with minimal effort. CasADi is an open-source tool for nonlinear optimization and algorithmic differentiation.
It facilitates rapid &amp;mdash; yet efficient &amp;mdash; implementation of different methods for numerical optimal control, both in an offline context and for nonlinear model predictive control (NMPC).</description>
    </item>
    
    <item>
      <title>Features</title>
      <link>https://web.casadi.org/home/card-ad/</link>
      <pubDate>Mon, 13 Oct 2014 20:07:19 +0000</pubDate>
      
      <guid>https://web.casadi.org/home/card-ad/</guid>
      <description>Algorithmic Differentiation (AD) CasADi&#39;s backbone is a symbolic framework implementing forward and reverse mode of AD on expression graphs to construct gradients, large-and-sparse Jacobians and Hessians. These expression graphs, encapsulated in Function objects, can be evaluated in a virtual machine or be exported to stand-alone C code. import casadi.* % Create scalar/matrix symbols x = MX.sym(&amp;#39;x&amp;#39;,5); % Compose into expressions y = norm(x,2); % Sensitivity of expression -&amp;gt; new expression grad_y = gradient(y,x) % Create a Function to evaluate expression f = Function(&amp;#39;f&amp;#39;,{x},{grad_y}); % Evaluate numerically grad_y_num = f([1;2;3;4;5]) from casadi import * # Create scalar/matrix symbols x = MX.</description>
    </item>
    
    <item>
      <title>Features</title>
      <link>https://web.casadi.org/home/card-integrator/</link>
      <pubDate>Mon, 13 Oct 2014 20:07:19 +0000</pubDate>
      
      <guid>https://web.casadi.org/home/card-integrator/</guid>
      <description>Dynamic systems $$ \begin{align} \left\\{ \begin{array}{ccll} \dot{x}_1 &amp;=&amp; (1-x_2^2) \\, x_1 - x_2, \quad &amp;x_1(0)=0 \\\\ \dot{x}_2 &amp;=&amp; x_1, \quad &amp;x_2(0)=1 \end{array} \right. \end{align} $$ import casadi.* x = MX.sym(&amp;#39;x&amp;#39;,2); % Two states % Expression for ODE right-hand side z = 1-x(2)^2; rhs = [z*x(1)-x(2);x(1)]; ode = struct; % ODE declaration ode.x = x; % states ode.ode = rhs; % right-hand side % Construct a Function that integrates over 4s F = integrator(&amp;#39;F&amp;#39;,&amp;#39;cvodes&amp;#39;,ode,0,4); % Start from x=[0;1] res = F(&amp;#39;x0&amp;#39;,[0;1]); disp(res.</description>
    </item>
    
    <item>
      <title>Features</title>
      <link>https://web.casadi.org/home/card-nlp/</link>
      <pubDate>Mon, 13 Oct 2014 20:07:19 +0000</pubDate>
      
      <guid>https://web.casadi.org/home/card-nlp/</guid>
      <description>Nonlinear and quadratic programming Nonlinear programs (NLPs), possibly with integer variables (MINLP), can be solved using block structure or general sparsity exploiting sequential quadratic programming (SQP) or interfaces to IPOPT/BONMIN, BlockSQP, WORHP, KNITRO, SNOPT, SLEQP, and Alpaqa. Solution sensitivities, up to arbitrary order, can be calculated analytically. Quadratic programs (QPs), possibly with integer variables (MIQP), can be solved using a primal-dual active-set method [3] or interfaces to CPLEX, GUROBI, HPIPM, OOQP, qpOASES or HiGHS.</description>
    </item>
    
    <item>
      <title>Features</title>
      <link>https://web.casadi.org/home/card-ocp/</link>
      <pubDate>Mon, 13 Oct 2014 20:07:19 +0000</pubDate>
      
      <guid>https://web.casadi.org/home/card-ocp/</guid>
      <description>Composition of the above import casadi.* x = MX.sym(&amp;#39;x&amp;#39;,2); % Two states p = MX.sym(&amp;#39;p&amp;#39;); % Free parameter % Expression for ODE right-hand side z = 1-x(2)^2; rhs = [z*x(1)-x(2)+2*tanh(p);x(1)]; % ODE declaration with free parameter ode = struct(&amp;#39;x&amp;#39;,x,&amp;#39;p&amp;#39;,p,&amp;#39;ode&amp;#39;,rhs); % Construct a Function that integrates over 1s F = integrator(&amp;#39;F&amp;#39;,&amp;#39;cvodes&amp;#39;,ode,0,1); % Control vector u = MX.sym(&amp;#39;u&amp;#39;,5,1); x = [0;1]; % Initial state for k=1:5 % Integrate 1s forward in time: % call integrator symbolically res = F(&amp;#39;x0&amp;#39;,x,&amp;#39;p&amp;#39;,u(k)); x = res.</description>
    </item>
    
    <item>
      <title>Get started</title>
      <link>https://web.casadi.org/home/card-users/</link>
      <pubDate>Mon, 13 Oct 2014 20:07:19 +0000</pubDate>
      
      <guid>https://web.casadi.org/home/card-users/</guid>
      <description>Applications CasADi saves time prototyping formulations, solving complex engineering problems, and building professional optimization tools. The landscape of its academic and industrial applications is diverse:
trajectory optimization optimal control OCP moving horizon estimation MHE model predictive control MPC NLP MINLP ODE differential equations algebraic loops DAE optimal experiment OED pseudo spectral direct collocation single shooting multiple shooting indirect methods machine learning distributed MPC multi-objective pareto front robust optimization scenario tree hierarchical control sigma points design control co-design stochastic optimization multi-level MPC time optimal path following iterative learning Gauss-Newton energy medical stabilization cost curves grey-box model Collision Avoidance Lagrangian Duality economic MPC NMPC self-reflective real-time offline online Lagrange mechanics object-oriented multi-stage path constraints non-steady periodic cyclic feasibility study offset-free mpc Gaussian belief space continuous systems discrete systems redundant manipulators inverse kinematics Jacobian Hessian gradient Lyapunov Examples of software with a CasADi backend: JModelica.</description>
    </item>
    
    <item>
      <title>Get started</title>
      <link>https://web.casadi.org/home/card-get-started/</link>
      <pubDate>Mon, 13 Oct 2014 20:07:19 +0000</pubDate>
      
      <guid>https://web.casadi.org/home/card-get-started/</guid>
      <description> ## Ready to try? Jump right in by getting CasADi and exploring the example pack, joining a workshop or online course, or watching a small tutorial. </description>
    </item>
    
    <item>
      <title>Welcome to CasADi</title>
      <link>https://web.casadi.org/home/card-paper/</link>
      <pubDate>Mon, 13 Oct 2014 20:07:19 +0000</pubDate>
      
      <guid>https://web.casadi.org/home/card-paper/</guid>
      <description> ## Paper about CasADi A detailed description of the tool and its implementation can be found in a recent paper in Mathematical Programming Computation (preprint). Please cite this paper if you use CasADi in your academic work. </description>
    </item>
    
    <item>
      <title>Keep informed</title>
      <link>https://web.casadi.org/home/card-newsletter/</link>
      <pubDate>Mon, 13 Oct 2014 20:07:19 +0000</pubDate>
      
      <guid>https://web.casadi.org/home/card-newsletter/</guid>
      <description> ## Keep informed Subscribe to our newsletter or follow us on the social media links below. </description>
    </item>
    
  </channel>
</rss>
