<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CasADi</title>
    <link>https://web.casadi.org/</link>
    <description>Recent content on CasADi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Oct 2014 20:07:19 +0000</lastBuildDate>
    
	<atom:link href="https://web.casadi.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Welcome to CasADi</title>
      <link>https://web.casadi.org/home/card-subtitle/</link>
      <pubDate>Mon, 13 Oct 2014 20:07:19 +0000</pubDate>
      
      <guid>https://web.casadi.org/home/card-subtitle/</guid>
      <description> Build efficient optimal control software, with minimal effort.  CasADi is an open-source tool for nonlinear optimization and algorithmic differentiation.
It facilitates rapid &amp;mdash; yet efficient &amp;mdash; implementation of different methods for numerical optimal control, both in an offline context and for nonlinear model predictive control (NMPC).
 </description>
    </item>
    
    <item>
      <title>Features</title>
      <link>https://web.casadi.org/home/card-ad/</link>
      <pubDate>Mon, 13 Oct 2014 20:07:19 +0000</pubDate>
      
      <guid>https://web.casadi.org/home/card-ad/</guid>
      <description>Algorithmic Differentiation (AD) CasADi&#39;s backbone is a symbolic framework implementing forward and reverse mode of AD on expression graphs to construct gradients, large-and-sparse Jacobians and Hessians. These expression graphs, encapsulated in Function objects, can be evaluated in a virtual machine or be exported to stand-alone C code.      import casadi.*% Create scalar/matrix symbolsx = MX.sym(&amp;#39;x&amp;#39;,5);% Compose into expressionsy = norm(x,2);% Sensitivity of expression -&amp;gt; new expressiongrad_y = gradient(y,x)% Create a Function to evaluate expressionf = Function(&amp;#39;f&amp;#39;,{x},{grad_y});% Evaluate numericallygrad_y_num = f([1;2;3;4;5]) from casadi import * # Create scalar/matrix symbols x = MX.</description>
    </item>
    
    <item>
      <title>Features</title>
      <link>https://web.casadi.org/home/card-integrator/</link>
      <pubDate>Mon, 13 Oct 2014 20:07:19 +0000</pubDate>
      
      <guid>https://web.casadi.org/home/card-integrator/</guid>
      <description>Dynamic systems    $$ \begin{align} \left\{ \begin{array}{ccll} \dot{x}_1 &amp;=&amp; (1-x_2^2) \, x_1 - x_2, \quad &amp;x_1(0)=0 \\ \dot{x}_2 &amp;=&amp; x_1, \quad &amp;x_2(0)=1 \end{array} \right. \end{align} $$  import casadi.*x = MX.sym(&amp;#39;x&amp;#39;,2); % Two states% Expression for ODE right-hand sidez = 1-x(2)^2;rhs = [z*x(1)-x(2);x(1)];ode = struct; % ODE declarationode.x = x; % statesode.ode = rhs; % right-hand side% Construct a Function that integrates over 4sF = integrator(&amp;#39;F&amp;#39;,&amp;#39;cvodes&amp;#39;,ode,struct(&amp;#39;tf&amp;#39;,4));% Start from x=[0;1]res = F(&amp;#39;x0&amp;#39;,[0;1]);disp(res.</description>
    </item>
    
    <item>
      <title>Features</title>
      <link>https://web.casadi.org/home/card-nlp/</link>
      <pubDate>Mon, 13 Oct 2014 20:07:19 +0000</pubDate>
      
      <guid>https://web.casadi.org/home/card-nlp/</guid>
      <description>Nonlinear and quadratic programming Nonlinear programs (NLPs), possibly with integer variables (MINLP), can be solved using block structure or general sparsity exploiting sequential quadratic programming (SQP) or interfaces to IPOPT/BONMIN, BlockSQP, WORHP, KNITRO and SNOPT. Solution sensitivities, up to arbitrary order, can be calculated analytically. Quadratic programs (QPs), possibly with integer variables (MIQP), can be solved using a primal-dual active-set method [3] or interfaces to CPLEX, GUROBI, HPMPC, OOQP or qpOASES.</description>
    </item>
    
    <item>
      <title>Features</title>
      <link>https://web.casadi.org/home/card-ocp/</link>
      <pubDate>Mon, 13 Oct 2014 20:07:19 +0000</pubDate>
      
      <guid>https://web.casadi.org/home/card-ocp/</guid>
      <description>Composition of the above       import casadi.*x = MX.sym(&amp;#39;x&amp;#39;,2); % Two statesp = MX.sym(&amp;#39;p&amp;#39;); % Free parameter% Expression for ODE right-hand sidez = 1-x(2)^2;rhs = [z*x(1)-x(2)+2*tanh(p);x(1)];% ODE declaration with free parameterode = struct(&amp;#39;x&amp;#39;,x,&amp;#39;p&amp;#39;,p,&amp;#39;ode&amp;#39;,rhs);% Construct a Function that integrates over 1sF = integrator(&amp;#39;F&amp;#39;,&amp;#39;cvodes&amp;#39;,ode,struct(&amp;#39;tf&amp;#39;,1));% Control vectoru = MX.sym(&amp;#39;u&amp;#39;,5,1);x = [0;1]; % Initial statefor k=1:5 % Integrate 1s forward in time: % call integrator symbolically res = F(&amp;#39;x0&amp;#39;,x,&amp;#39;p&amp;#39;,u(k)); x = res.</description>
    </item>
    
    <item>
      <title>Get started</title>
      <link>https://web.casadi.org/home/card-users/</link>
      <pubDate>Mon, 13 Oct 2014 20:07:19 +0000</pubDate>
      
      <guid>https://web.casadi.org/home/card-users/</guid>
      <description>Applications CasADi saves time prototyping formulations, solving complex engineering problems, and building professional optimization tools. The landscape of its academic and industrial applications is diverse:
  thermal control-- wind turbine-- airborne wind-- solar thermal-- fossil fuel-- renewables-- grid balance-- trajectory optimization optimal control OCP moving horizon estimation MHE model predictive control MPC NLP MINLP ODE differential equations algebraic loops DAE bio-reactors-- autonomous vehicles-- iceberg drift-- optimal experiment OED steam power-- pseudo spectral direct collocation single shooting multiple shooting indirect methods machine learning serial robots-- dual control-- distributed MPC multi-objective pareto front robust optimization scenario tree hierarchical control sigma points gearbox synthesis-- artificial pancreas-- polynomial chaos-- traffic control-- MEMS-- walking robot-- design control co-design stochastic optimization spline-relaxations-- multi-level MPC tube following-- time optimal path following iterative learning Gauss-Newton energy medical fixed-bed reactor-- chemical reactor-- stabilization cost curves grey-box model Collision Avoidance Lagrangian Duality economic MPC NMPC self-reflective real-time offline online mesh refinement-- pose estimation heart model-- Lagrange mechanics Baumgarte-- invariants-- atomic layer deposition--  well network-- object-oriented multi-stage path constraints pharmacokinetic-- non-steady periodic cyclic feasibility study air conditioning-- powertrain-- diesel-- biological networks-- offset-free mpc Gaussian belief space continuous systems discrete systems redundant manipulators inverse kinematics marine vessel-- confidence interval-- agriculture-- B-spline-- path-parametric-- invariant description-- heat exchangers-- Jacobian Hessian gradient Lyapunov  Examples of software with a CasADi backend: JModelica.</description>
    </item>
    
    <item>
      <title>Get started</title>
      <link>https://web.casadi.org/home/card-get-started/</link>
      <pubDate>Mon, 13 Oct 2014 20:07:19 +0000</pubDate>
      
      <guid>https://web.casadi.org/home/card-get-started/</guid>
      <description>## Ready to try? Jump right in by getting CasADi and exploring the example pack, joining a workshop, or watching a small tutorial.  </description>
    </item>
    
    <item>
      <title>Welcome to CasADi</title>
      <link>https://web.casadi.org/home/card-paper/</link>
      <pubDate>Mon, 13 Oct 2014 20:07:19 +0000</pubDate>
      
      <guid>https://web.casadi.org/home/card-paper/</guid>
      <description>## Paper about CasADi A detailed description of the tool and its implementation can be found in a recent paper in Mathematical Programming Computation (preprint). Please cite this paper if you use CasADi in your academic work. </description>
    </item>
    
    <item>
      <title>Keep informed</title>
      <link>https://web.casadi.org/home/card-newsletter/</link>
      <pubDate>Mon, 13 Oct 2014 20:07:19 +0000</pubDate>
      
      <guid>https://web.casadi.org/home/card-newsletter/</guid>
      <description>## Keep informed Subscribe to our newsletter or follow us on the social media links below. </description>
    </item>
    
    <item>
      <title>CasADi-driven MPC in Simulink (part 2)</title>
      <link>https://web.casadi.org/blog/mpc-simulink2/</link>
      <pubDate>Thu, 19 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://web.casadi.org/blog/mpc-simulink2/</guid>
      <description>In this post, we have a new take on nonlinear MPC in Simulink using CasADi.
Interpreter mode In an earlier post on MPC in Simulink, we used an interpreted &#39;Matlab system&#39; block in the simulink diagram. This is flexible, but slow because of interpreter overhead.
code-generation mode In an earlier post on S-Functions, we showed how Casadi-generated C code can be embedded efficiently in a Simulink diagram using S-functions. The result is fast, but has restrictions: only SqpMethod combined with Qrqp or Osqp solver can be code-generated (as of 3.</description>
    </item>
    
    <item>
      <title>Sensitivities of parametric NLP</title>
      <link>https://web.casadi.org/blog/nlp_sens/</link>
      <pubDate>Mon, 28 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://web.casadi.org/blog/nlp_sens/</guid>
      <description>In this post, we explore the parametric sensitivities of a nonlinear program (NLP). While we use &#39;Opti stack&#39; syntax for modeling, differentiability of NLP solvers works all the same without Opti.
Parametric nonlinear programming Let&#39;s start by defining an NLP that depends on a parameter $p \in \mathbb{R}$ that should not be optimized for: $$ \begin{align} \displaystyle \underset{x,y} {\text{minimize}}\quad &amp;amp;\displaystyle (1-x)^2+0.2(y-x^2)^2 \newline \text{subject to} \, \quad &amp;amp; \frac{p^2}{4} \leq (x+0.</description>
    </item>
    
    <item>
      <title>Parfor</title>
      <link>https://web.casadi.org/blog/parfor/</link>
      <pubDate>Thu, 23 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://web.casadi.org/blog/parfor/</guid>
      <description>In this post we&#39;ll explore how to use Matlab&#39;s parfor with a CasADi nonlinear program.
The nonlinear program (NLP) of interest is the following: $$ \begin{align} \displaystyle \underset{x,y} {\text{minimize}}\quad &amp;amp;\displaystyle (1-x)^2+(y-x^2)^2 \newline \text{subject to} \, \quad &amp;amp; x^2+y^2 \leq r \end{align} $$ Note that $r$ is a free parameter. Our goal is to collect each solution of the NLP as we loop over $r$. We could imagine performing such task when tracing a pareto front of a multi-objective optimization, for which the parameter would be the a weight to combine those objectives.</description>
    </item>
    
    <item>
      <title>Tensorflow and CasADi</title>
      <link>https://web.casadi.org/blog/tensorflow/</link>
      <pubDate>Mon, 30 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://web.casadi.org/blog/tensorflow/</guid>
      <description>In this post we&#39;ll explore how to couple Tensorflow and CasADi. Thanks to Jonas Koch (student @ Applied Mathematics WWU Muenster) for delivering inspiration and example code.
One-dimensional regression with GPflow An important part of machine learning is about regression: fitting a (non-)linear model through sparse data. This is an unconstrained optimization problem for which dedicated algorithms and software are readily available.
Let&#39;s create some datapoints to fit, a perturbed sine.</description>
    </item>
    
    <item>
      <title>Breaking free of CasADi&#39;s solvers</title>
      <link>https://web.casadi.org/blog/fmincon/</link>
      <pubDate>Fri, 13 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://web.casadi.org/blog/fmincon/</guid>
      <description>Once you&#39;ve modeled your optimization problem in CasADi, you don&#39;t have to stick to the solvers we interface.
In this post, we briefly demonstrate how we can make CasADi and Matlab&#39;s fmincon cooperate.
Trivial unconstrained problem Let&#39;s consider a very simple scalar unconstrained optimization:
$$ \begin{align} \displaystyle \underset{x} {\text{minimize}}\quad &amp;amp; \sin(x)^2 \end{align} $$
You can solve this with fminunc:
fminunc(@(x) sin(x)^2, 0.1) The first argument, an anonymous function, can contain any code, including CasADi code.</description>
    </item>
    
    <item>
      <title>CasADi codegen and S-Functions</title>
      <link>https://web.casadi.org/blog/s-function/</link>
      <pubDate>Fri, 13 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://web.casadi.org/blog/s-function/</guid>
      <description>While the user guide does explain code-generation in full detail, it is handy to have a demonstration in a real environment like Matlab&#39;s S-functions.
The problem We will design a Simulink block that implements a nonlinear mapping from ($\mathbf{R}^2$, $\mathbf{R}$) to ($\mathbf{R}$,$\mathbf{R}^2$):
import casadi.* x = MX.sym(&amp;#39;x&amp;#39;,2); y = MX.sym(&amp;#39;y&amp;#39;); w = dot(x,y*x); z = sin(x)+y+w; f = Function(&amp;#39;f&amp;#39;,{x,y},{w,z}); Code-generating You may generate code from this with:
f.generate(&amp;#39;f.c&amp;#39;) However, we&#39;ll use the more advanced syntax since we have advanced requirements.</description>
    </item>
    
    <item>
      <title>On the importance of NLP scaling</title>
      <link>https://web.casadi.org/blog/nlp-scaling/</link>
      <pubDate>Fri, 15 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://web.casadi.org/blog/nlp-scaling/</guid>
      <description>&lt;p&gt;During my master&#39;s thesis at KULeuven on optimal control, one of the take-aways were that it&#39;s important to scale your variables. It helps convergence if the variables are in the order of 0.01 to 100.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Optimal control problems in a nutshell</title>
      <link>https://web.casadi.org/blog/ocp/</link>
      <pubDate>Fri, 15 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://web.casadi.org/blog/ocp/</guid>
      <description>&lt;p&gt;Optimization.
There&#39;s a mathematical term that sounds familiar to the general public.
Everyone can imagine engineers working hard to make your car run 1% more fuel-efficient,
or to slightly increase profit margins for a chemical company.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Easy NLP modeling in CasADi with Opti</title>
      <link>https://web.casadi.org/blog/opti/</link>
      <pubDate>Thu, 14 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://web.casadi.org/blog/opti/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://install33.casadi.org&#34;&gt;Release 3.3.0&lt;/a&gt; of CasADi introduced a compact syntax for NLP modeling, using a set of helper classes, collectively known as &#39;Opti stack&#39;.&lt;/p&gt;

&lt;p&gt;In this post, we briefly demonstrates this functionality.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CasADi-driven MPC in Simulink (part 1)</title>
      <link>https://web.casadi.org/blog/mpc-simulink/</link>
      <pubDate>Wed, 08 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://web.casadi.org/blog/mpc-simulink/</guid>
      <description>&lt;p&gt;CasADi is not a monolithic tool. We can easily couple it to other software to have more fun.
Today we&#39;ll be exploring a &lt;em&gt;simple&lt;/em&gt; coupling with Simulink. We&#39;ll be showing off nonlinear MPC (NMPC).&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>